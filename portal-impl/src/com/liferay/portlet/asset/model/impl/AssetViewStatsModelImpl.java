/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portlet.asset.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.asset.model.AssetViewStats;
import com.liferay.portlet.asset.model.AssetViewStatsModel;
import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AssetViewStats service. Represents a row in the &quot;AssetViewStats&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portlet.asset.model.AssetViewStatsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssetViewStatsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AssetViewStatsImpl
 * @see com.liferay.portlet.asset.model.AssetViewStats
 * @see com.liferay.portlet.asset.model.AssetViewStatsModel
 * @generated
 */
public class AssetViewStatsModelImpl extends BaseModelImpl<AssetViewStats>
	implements AssetViewStatsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a asset view stats model instance should use the {@link com.liferay.portlet.asset.model.AssetViewStats} interface instead.
	 */
	public static final String TABLE_NAME = "AssetViewStats";
	public static final Object[][] TABLE_COLUMNS = {
			{ "viewStatsId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "viewDate", Types.TIMESTAMP },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table AssetViewStats (viewStatsId LONG not null primary key,userId LONG,viewDate DATE null,classNameId LONG,classPK LONG)";
	public static final String TABLE_SQL_DROP = "drop table AssetViewStats";
	public static final String ORDER_BY_JPQL = " ORDER BY assetViewStats.viewDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AssetViewStats.viewDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portlet.asset.model.AssetViewStats"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portlet.asset.model.AssetViewStats"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portlet.asset.model.AssetViewStats"),
			true);
	public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long VIEWDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portlet.asset.model.AssetViewStats"));

	public AssetViewStatsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _viewStatsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setViewStatsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _viewStatsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AssetViewStats.class;
	}

	@Override
	public String getModelClassName() {
		return AssetViewStats.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("viewStatsId", getViewStatsId());
		attributes.put("userId", getUserId());
		attributes.put("viewDate", getViewDate());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long viewStatsId = (Long)attributes.get("viewStatsId");

		if (viewStatsId != null) {
			setViewStatsId(viewStatsId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date viewDate = (Date)attributes.get("viewDate");

		if (viewDate != null) {
			setViewDate(viewDate);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}
	}

	@Override
	public long getViewStatsId() {
		return _viewStatsId;
	}

	@Override
	public void setViewStatsId(long viewStatsId) {
		_viewStatsId = viewStatsId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public Date getViewDate() {
		return _viewDate;
	}

	@Override
	public void setViewDate(Date viewDate) {
		_columnBitmask = -1L;

		_viewDate = viewDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AssetViewStats.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AssetViewStats toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AssetViewStats)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssetViewStatsImpl assetViewStatsImpl = new AssetViewStatsImpl();

		assetViewStatsImpl.setViewStatsId(getViewStatsId());
		assetViewStatsImpl.setUserId(getUserId());
		assetViewStatsImpl.setViewDate(getViewDate());
		assetViewStatsImpl.setClassNameId(getClassNameId());
		assetViewStatsImpl.setClassPK(getClassPK());

		assetViewStatsImpl.resetOriginalValues();

		return assetViewStatsImpl;
	}

	@Override
	public int compareTo(AssetViewStats assetViewStats) {
		int value = 0;

		value = DateUtil.compareTo(getViewDate(), assetViewStats.getViewDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AssetViewStats)) {
			return false;
		}

		AssetViewStats assetViewStats = (AssetViewStats)obj;

		long primaryKey = assetViewStats.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AssetViewStatsModelImpl assetViewStatsModelImpl = this;

		assetViewStatsModelImpl._originalClassNameId = assetViewStatsModelImpl._classNameId;

		assetViewStatsModelImpl._setOriginalClassNameId = false;

		assetViewStatsModelImpl._originalClassPK = assetViewStatsModelImpl._classPK;

		assetViewStatsModelImpl._setOriginalClassPK = false;

		assetViewStatsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AssetViewStats> toCacheModel() {
		AssetViewStatsCacheModel assetViewStatsCacheModel = new AssetViewStatsCacheModel();

		assetViewStatsCacheModel.viewStatsId = getViewStatsId();

		assetViewStatsCacheModel.userId = getUserId();

		Date viewDate = getViewDate();

		if (viewDate != null) {
			assetViewStatsCacheModel.viewDate = viewDate.getTime();
		}
		else {
			assetViewStatsCacheModel.viewDate = Long.MIN_VALUE;
		}

		assetViewStatsCacheModel.classNameId = getClassNameId();

		assetViewStatsCacheModel.classPK = getClassPK();

		return assetViewStatsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{viewStatsId=");
		sb.append(getViewStatsId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", viewDate=");
		sb.append(getViewDate());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portlet.asset.model.AssetViewStats");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>viewStatsId</column-name><column-value><![CDATA[");
		sb.append(getViewStatsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewDate</column-name><column-value><![CDATA[");
		sb.append(getViewDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AssetViewStats.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AssetViewStats.class
		};
	private long _viewStatsId;
	private long _userId;
	private String _userUuid;
	private Date _viewDate;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _columnBitmask;
	private AssetViewStats _escapedModel;
}